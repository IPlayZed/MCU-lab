C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/02/2021 14:43:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\hallgat
                    -o\SimplicityStudio\v5_workspace\feladat_1\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOA
                    -TFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\hallgato\SimplicityStudio\v5_wo
                    -rkspace\feladat_1\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/shared/si8051Base;C:/Silicon
                    -Labs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120)
                    - PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_0_enter_DefaultMode_from_RESET ();
  28   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  29   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  30   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  31   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  32   1        // [Config Calls]$
  33   1      
  34   1      }
  35          
  36          extern void
  37          WDT_0_enter_DefaultMode_from_RESET (void)
  38          {
  39   1        // $[Watchdog Timer Init Variable Declarations]
  40   1        uint32_t i;
  41   1        bool ea;
  42   1        // [Watchdog Timer Init Variable Declarations]$
  43   1      
  44   1        // $[WDTCN - Watchdog Timer Control]
  45   1        // Deprecated
  46   1        // [WDTCN - Watchdog Timer Control]$
  47   1      
  48   1        // $[WDTCN_2 - Watchdog Timer Control]
  49   1      
  50   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  51   1        WDTCN = 0xA5;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/02/2021 14:43:00 PAGE 2   

  52   1      
  53   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  54   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  55   1          {
  56   2            NOP ();
  57   2          }
  58   1      
  59   1        // Disable WDT
  60   1        ea = IE_EA;
  61   1        IE_EA = 0;
  62   1        WDTCN = 0xDE;
  63   1        WDTCN = 0xAD;
  64   1        IE_EA = ea;
  65   1      
  66   1        // [WDTCN_2 - Watchdog Timer Control]$
  67   1      
  68   1      }
  69          
  70          extern void
  71          PBCFG_0_enter_DefaultMode_from_RESET (void)
  72          {
  73   1        // $[XBR2 - Port I/O Crossbar 2]
  74   1        /***********************************************************************
  75   1         - Weak Pullups enabled 
  76   1         - Crossbar enabled
  77   1         ***********************************************************************/
  78   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  79   1        // [XBR2 - Port I/O Crossbar 2]$
  80   1      
  81   1        // $[PRTDRV - Port Drive Strength]
  82   1        // [PRTDRV - Port Drive Strength]$
  83   1      
  84   1        // $[XBR0 - Port I/O Crossbar 0]
  85   1        /***********************************************************************
  86   1         - UART TX, RX routed to Port pins P0.4 and P0.5
  87   1         - SPI I/O unavailable at Port pins
  88   1         - SMBus 0 I/O unavailable at Port pins
  89   1         - CP0 unavailable at Port pin
  90   1         - Asynchronous CP0 unavailable at Port pin
  91   1         - CP1 unavailable at Port pin
  92   1         - Asynchronous CP1 unavailable at Port pin
  93   1         - SYSCLK unavailable at Port pin
  94   1         ***********************************************************************/
  95   1        XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__DISABLED
  96   1            | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
  97   1            | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
  98   1        // [XBR0 - Port I/O Crossbar 0]$
  99   1      
 100   1        // $[XBR1 - Port I/O Crossbar 1]
 101   1        // [XBR1 - Port I/O Crossbar 1]$
 102   1      
 103   1      }
 104          
 105          extern void
 106          PORTS_0_enter_DefaultMode_from_RESET (void)
 107          {
 108   1        // $[P0 - Port 0 Pin Latch]
 109   1        // [P0 - Port 0 Pin Latch]$
 110   1      
 111   1        // $[P0MDOUT - Port 0 Output Mode]
 112   1        /***********************************************************************
 113   1         - P0.0 output is open-drain
 114   1         - P0.1 output is open-drain
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/02/2021 14:43:00 PAGE 3   

 115   1         - P0.2 output is open-drain
 116   1         - P0.3 output is open-drain
 117   1         - P0.4 output is push-pull
 118   1         - P0.5 output is open-drain
 119   1         - P0.6 output is open-drain
 120   1         - P0.7 output is open-drain
 121   1         ***********************************************************************/
 122   1        P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 123   1            | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN | P0MDOUT_B4__PUSH_PULL
 124   1            | P0MDOUT_B5__OPEN_DRAIN | P0MDOUT_B6__OPEN_DRAIN
 125   1            | P0MDOUT_B7__OPEN_DRAIN;
 126   1        // [P0MDOUT - Port 0 Output Mode]$
 127   1      
 128   1        // $[P0MDIN - Port 0 Input Mode]
 129   1        // [P0MDIN - Port 0 Input Mode]$
 130   1      
 131   1        // $[P0SKIP - Port 0 Skip]
 132   1        // [P0SKIP - Port 0 Skip]$
 133   1      
 134   1        // $[P0MASK - Port 0 Mask]
 135   1        // [P0MASK - Port 0 Mask]$
 136   1      
 137   1        // $[P0MAT - Port 0 Match]
 138   1        // [P0MAT - Port 0 Match]$
 139   1      
 140   1      }
 141          
 142          extern void
 143          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 144          {
 145   1        // $[CKCON0 - Clock Control 0]
 146   1        /***********************************************************************
 147   1         - System clock divided by 12
 148   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 149   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 150   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 151   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 152   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 153   1         - Timer 1 uses the system clock
 154   1         ***********************************************************************/
 155   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 156   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 157   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 158   1            | CKCON0_T1M__SYSCLK;
 159   1        // [CKCON0 - Clock Control 0]$
 160   1      
 161   1        // $[TMOD - Timer 0/1 Mode]
 162   1        /***********************************************************************
 163   1         - Mode 0, 13-bit Counter/Timer
 164   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 165   1         - Timer Mode
 166   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 167   1         - Timer Mode
 168   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 169   1         ***********************************************************************/
 170   1        TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 171   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 172   1        // [TMOD - Timer 0/1 Mode]$
 173   1      
 174   1        // $[TCON - Timer 0/1 Control]
 175   1        /***********************************************************************
 176   1         - Start Timer 1 running
 177   1         ***********************************************************************/
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/02/2021 14:43:00 PAGE 4   

 178   1        TCON |= TCON_TR1__RUN;
 179   1        // [TCON - Timer 0/1 Control]$
 180   1      
 181   1      }
 182          
 183          extern void
 184          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 185          {
 186   1      
 187   1      }
 188          
 189          extern void
 190          CLOCK_0_enter_DefaultMode_from_RESET (void)
 191          {
 192   1        // $[CLKSEL - Clock Select]
 193   1        /***********************************************************************
 194   1         - Clock derived from the Internal High-Frequency Oscillator
 195   1         - SYSCLK is equal to selected clock source divided by 1
 196   1         ***********************************************************************/
 197   1        CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 198   1        // [CLKSEL - Clock Select]$
 199   1      
 200   1      }
 201          
 202          extern void
 203          TIMER01_0_enter_DefaultMode_from_RESET (void)
 204          {
 205   1        // $[Timer Initialization]
 206   1        //Save Timer Configuration
 207   1        uint8_t TCON_save;
 208   1        TCON_save = TCON;
 209   1        //Stop Timers
 210   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 211   1      
 212   1        // [Timer Initialization]$
 213   1      
 214   1        // $[TH0 - Timer 0 High Byte]
 215   1        // [TH0 - Timer 0 High Byte]$
 216   1      
 217   1        // $[TL0 - Timer 0 Low Byte]
 218   1        // [TL0 - Timer 0 Low Byte]$
 219   1      
 220   1        // $[TH1 - Timer 1 High Byte]
 221   1        /***********************************************************************
 222   1         - Timer 1 High Byte = 0x96
 223   1         ***********************************************************************/
 224   1        TH1 = (0x96 << TH1_TH1__SHIFT);
 225   1        // [TH1 - Timer 1 High Byte]$
 226   1      
 227   1        // $[TL1 - Timer 1 Low Byte]
 228   1        // [TL1 - Timer 1 Low Byte]$
 229   1      
 230   1        // $[Timer Restoration]
 231   1        //Restore Timer Configuration
 232   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 233   1      
 234   1        // [Timer Restoration]$
 235   1      
 236   1      }
 237          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/02/2021 14:43:00 PAGE 5   

   CODE SIZE        =    136    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
