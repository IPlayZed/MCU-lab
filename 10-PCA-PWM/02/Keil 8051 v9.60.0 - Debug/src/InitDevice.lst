C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\hallgat
                    -o\SimplicityStudio\v5_workspace\02\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\hallgato\SimplicityStudio\v5_workspace
                    -\02\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/shared/si8051Base;C:/SiliconLabs/Simplicit
                    -yStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65
                    -) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_0_enter_DefaultMode_from_RESET ();
  28   1        PORTS_1_enter_DefaultMode_from_RESET ();
  29   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  30   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  31   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  32   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  33   1        PCA_0_enter_DefaultMode_from_RESET ();
  34   1        PCACH_0_enter_DefaultMode_from_RESET ();
  35   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  36   1        // [Config Calls]$
  37   1      
  38   1      }
  39          
  40          extern void
  41          WDT_0_enter_DefaultMode_from_RESET (void)
  42          {
  43   1        // $[Watchdog Timer Init Variable Declarations]
  44   1        uint32_t i;
  45   1        bool ea;
  46   1        // [Watchdog Timer Init Variable Declarations]$
  47   1      
  48   1        // $[WDTCN - Watchdog Timer Control]
  49   1        // Deprecated
  50   1        // [WDTCN - Watchdog Timer Control]$
  51   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 2   

  52   1        // $[WDTCN_2 - Watchdog Timer Control]
  53   1      
  54   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  55   1        WDTCN = 0xA5;
  56   1      
  57   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  58   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  59   1          {
  60   2            NOP ();
  61   2          }
  62   1      
  63   1        // Disable WDT
  64   1        ea = IE_EA;
  65   1        IE_EA = 0;
  66   1        WDTCN = 0xDE;
  67   1        WDTCN = 0xAD;
  68   1        IE_EA = ea;
  69   1      
  70   1        // [WDTCN_2 - Watchdog Timer Control]$
  71   1      
  72   1      }
  73          
  74          extern void
  75          PORTS_0_enter_DefaultMode_from_RESET (void)
  76          {
  77   1        // $[P0 - Port 0 Pin Latch]
  78   1        // [P0 - Port 0 Pin Latch]$
  79   1      
  80   1        // $[P0MDOUT - Port 0 Output Mode]
  81   1        // [P0MDOUT - Port 0 Output Mode]$
  82   1      
  83   1        // $[P0MDIN - Port 0 Input Mode]
  84   1        // [P0MDIN - Port 0 Input Mode]$
  85   1      
  86   1        // $[P0SKIP - Port 0 Skip]
  87   1        /***********************************************************************
  88   1         - P0.0 pin is skipped by the crossbar
  89   1         - P0.1 pin is skipped by the crossbar
  90   1         - P0.2 pin is skipped by the crossbar
  91   1         - P0.3 pin is skipped by the crossbar
  92   1         - P0.4 pin is skipped by the crossbar
  93   1         - P0.5 pin is skipped by the crossbar
  94   1         - P0.6 pin is skipped by the crossbar
  95   1         - P0.7 pin is skipped by the crossbar
  96   1         ***********************************************************************/
  97   1        P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  98   1            | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  99   1            | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
 100   1        // [P0SKIP - Port 0 Skip]$
 101   1      
 102   1        // $[P0MASK - Port 0 Mask]
 103   1        // [P0MASK - Port 0 Mask]$
 104   1      
 105   1        // $[P0MAT - Port 0 Match]
 106   1        // [P0MAT - Port 0 Match]$
 107   1      
 108   1      }
 109          
 110          extern void
 111          PORTS_1_enter_DefaultMode_from_RESET (void)
 112          {
 113   1        // $[P1 - Port 1 Pin Latch]
 114   1        // [P1 - Port 1 Pin Latch]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 3   

 115   1      
 116   1        // $[P1MDOUT - Port 1 Output Mode]
 117   1        // [P1MDOUT - Port 1 Output Mode]$
 118   1      
 119   1        // $[P1MDIN - Port 1 Input Mode]
 120   1        // [P1MDIN - Port 1 Input Mode]$
 121   1      
 122   1        // $[P1SKIP - Port 1 Skip]
 123   1        /***********************************************************************
 124   1         - P1.0 pin is skipped by the crossbar
 125   1         - P1.1 pin is skipped by the crossbar
 126   1         - P1.2 pin is skipped by the crossbar
 127   1         - P1.3 pin is skipped by the crossbar
 128   1         - P1.4 pin is not skipped by the crossbar
 129   1         - P1.5 pin is not skipped by the crossbar
 130   1         - P1.6 pin is not skipped by the crossbar
 131   1         - P1.7 pin is not skipped by the crossbar
 132   1         ***********************************************************************/
 133   1        P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 134   1            | P1SKIP_B3__SKIPPED | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 135   1            | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__NOT_SKIPPED;
 136   1        // [P1SKIP - Port 1 Skip]$
 137   1      
 138   1        // $[P1MASK - Port 1 Mask]
 139   1        // [P1MASK - Port 1 Mask]$
 140   1      
 141   1        // $[P1MAT - Port 1 Match]
 142   1        // [P1MAT - Port 1 Match]$
 143   1      
 144   1      }
 145          
 146          extern void
 147          PBCFG_0_enter_DefaultMode_from_RESET (void)
 148          {
 149   1        // $[XBR2 - Port I/O Crossbar 2]
 150   1        /***********************************************************************
 151   1         - Weak Pullups enabled 
 152   1         - Crossbar enabled
 153   1         ***********************************************************************/
 154   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 155   1        // [XBR2 - Port I/O Crossbar 2]$
 156   1      
 157   1        // $[PRTDRV - Port Drive Strength]
 158   1        // [PRTDRV - Port Drive Strength]$
 159   1      
 160   1        // $[XBR0 - Port I/O Crossbar 0]
 161   1        // [XBR0 - Port I/O Crossbar 0]$
 162   1      
 163   1        // $[XBR1 - Port I/O Crossbar 1]
 164   1        /***********************************************************************
 165   1         - CEX0 routed to Port pin
 166   1         - ECI unavailable at Port pin
 167   1         - T0 unavailable at Port pin
 168   1         - T1 unavailable at Port pin
 169   1         - T2 unavailable at Port pin
 170   1         ***********************************************************************/
 171   1        XBR1 = XBR1_PCA0ME__CEX0 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 172   1            | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 173   1        // [XBR1 - Port I/O Crossbar 1]$
 174   1      
 175   1      }
 176          
 177          extern void
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 4   

 178          TIMER01_0_enter_DefaultMode_from_RESET (void)
 179          {
 180   1        // $[Timer Initialization]
 181   1        //Save Timer Configuration
 182   1        uint8_t TCON_save;
 183   1        TCON_save = TCON;
 184   1        //Stop Timers
 185   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 186   1      
 187   1        // [Timer Initialization]$
 188   1      
 189   1        // $[TH0 - Timer 0 High Byte]
 190   1        /***********************************************************************
 191   1         - Timer 0 High Byte = 0x07
 192   1         ***********************************************************************/
 193   1        TH0 = (0x07 << TH0_TH0__SHIFT);
 194   1        // [TH0 - Timer 0 High Byte]$
 195   1      
 196   1        // $[TL0 - Timer 0 Low Byte]
 197   1        // [TL0 - Timer 0 Low Byte]$
 198   1      
 199   1        // $[TH1 - Timer 1 High Byte]
 200   1        // [TH1 - Timer 1 High Byte]$
 201   1      
 202   1        // $[TL1 - Timer 1 Low Byte]
 203   1        // [TL1 - Timer 1 Low Byte]$
 204   1      
 205   1        // $[Timer Restoration]
 206   1        //Restore Timer Configuration
 207   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 208   1      
 209   1        // [Timer Restoration]$
 210   1      
 211   1      }
 212          
 213          extern void
 214          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 215          {
 216   1        // $[CKCON0 - Clock Control 0]
 217   1        /***********************************************************************
 218   1         - System clock divided by 48
 219   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 220   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 221   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 222   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 223   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 224   1         - Timer 1 uses the clock defined by the prescale field, SCA
 225   1         ***********************************************************************/
 226   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_48 | CKCON0_T0M__PRESCALE
 227   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 228   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 229   1            | CKCON0_T1M__PRESCALE;
 230   1        // [CKCON0 - Clock Control 0]$
 231   1      
 232   1        // $[TMOD - Timer 0/1 Mode]
 233   1        /***********************************************************************
 234   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 235   1         - Mode 0, 13-bit Counter/Timer
 236   1         - Timer Mode
 237   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 238   1         - Timer Mode
 239   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 240   1         ***********************************************************************/
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 5   

 241   1        TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 242   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 243   1        // [TMOD - Timer 0/1 Mode]$
 244   1      
 245   1        // $[TCON - Timer 0/1 Control]
 246   1        /***********************************************************************
 247   1         - Start Timer 0 running
 248   1         ***********************************************************************/
 249   1        TCON |= TCON_TR0__RUN;
 250   1        // [TCON - Timer 0/1 Control]$
 251   1      
 252   1      }
 253          
 254          extern void
 255          PCA_0_enter_DefaultMode_from_RESET (void)
 256          {
 257   1        // $[PCA Off]
 258   1        PCA0CN0_CR = PCA0CN0_CR__STOP;
 259   1        // [PCA Off]$
 260   1      
 261   1        // $[PCA0MD - PCA Mode]
 262   1        /***********************************************************************
 263   1         - PCA continues to function normally while the system controller is in
 264   1         Idle Mode
 265   1         - Disable the CF interrupt
 266   1         - Timer 0 overflow
 267   1         ***********************************************************************/
 268   1        PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 269   1            | PCA0MD_CPS__T0_OVERFLOW;
 270   1        // [PCA0MD - PCA Mode]$
 271   1      
 272   1        // $[PCA0CENT - PCA Center Alignment Enable]
 273   1        // [PCA0CENT - PCA Center Alignment Enable]$
 274   1      
 275   1        // $[PCA0CLR - PCA Comparator Clear Control]
 276   1        // [PCA0CLR - PCA Comparator Clear Control]$
 277   1      
 278   1        // $[PCA0L - PCA Counter/Timer Low Byte]
 279   1        // [PCA0L - PCA Counter/Timer Low Byte]$
 280   1      
 281   1        // $[PCA0H - PCA Counter/Timer High Byte]
 282   1        // [PCA0H - PCA Counter/Timer High Byte]$
 283   1      
 284   1        // $[PCA0POL - PCA Output Polarity]
 285   1        // [PCA0POL - PCA Output Polarity]$
 286   1      
 287   1        // $[PCA0PWM - PCA PWM Configuration]
 288   1        // [PCA0PWM - PCA PWM Configuration]$
 289   1      
 290   1        // $[PCA On]
 291   1        PCA0CN0_CR = PCA0CN0_CR__RUN;
 292   1        // [PCA On]$
 293   1      
 294   1      }
 295          
 296          extern void
 297          PCACH_0_enter_DefaultMode_from_RESET (void)
 298          {
 299   1        // $[PCA0 Settings Save]
 300   1        // Select Capture/Compare register)
 301   1        PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 302   1        // [PCA0 Settings Save]$
 303   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 6   

 304   1        // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 305   1        /***********************************************************************
 306   1         - Disable negative edge capture
 307   1         - Disable CCF0 interrupts
 308   1         - Disable match function
 309   1         - 8 to 11-bit PWM selected
 310   1         - Disable positive edge capture
 311   1         - Enable comparator function
 312   1         - Enable PWM function
 313   1         - Disable toggle function
 314   1         ***********************************************************************/
 315   1        PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 316   1            | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT | PCA0CPM0_CAPP__DISABLED
 317   1            | PCA0CPM0_ECOM__ENABLED | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 318   1        // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 319   1      
 320   1        // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 321   1        /***********************************************************************
 322   1         - PCA Channel 0 Capture Module Low Byte = 0xC0
 323   1         ***********************************************************************/
 324   1        PCA0CPL0 = (0xC0 << PCA0CPL0_PCA0CPL0__SHIFT);
 325   1        // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 326   1      
 327   1        // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 328   1        PCA0CPH0 = 0x00;
 329   1        // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 330   1      
 331   1        // $[Auto-reload]
 332   1        // [Auto-reload]$
 333   1      
 334   1        // $[PCA0 Settings Restore]
 335   1        // [PCA0 Settings Restore]$
 336   1      
 337   1      }
 338          
 339          extern void
 340          TIMER16_2_enter_DefaultMode_from_RESET (void)
 341          {
 342   1        // $[Timer Initialization]
 343   1        // Save Timer Configuration
 344   1        uint8_t TMR2CN0_TR2_save;
 345   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 346   1        // Stop Timer
 347   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 348   1        // [Timer Initialization]$
 349   1      
 350   1        // $[TMR2CN0 - Timer 2 Control]
 351   1        // [TMR2CN0 - Timer 2 Control]$
 352   1      
 353   1        // $[TMR2H - Timer 2 High Byte]
 354   1        // [TMR2H - Timer 2 High Byte]$
 355   1      
 356   1        // $[TMR2L - Timer 2 Low Byte]
 357   1        // [TMR2L - Timer 2 Low Byte]$
 358   1      
 359   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 360   1        /***********************************************************************
 361   1         - Timer 2 Reload High Byte = 0x06
 362   1         ***********************************************************************/
 363   1        TMR2RLH = (0x06 << TMR2RLH_TMR2RLH__SHIFT);
 364   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 365   1      
 366   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 7   

 367   1        /***********************************************************************
 368   1         - Timer 2 Reload Low Byte = 0xC6
 369   1         ***********************************************************************/
 370   1        TMR2RLL = (0xC6 << TMR2RLL_TMR2RLL__SHIFT);
 371   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 372   1      
 373   1        // $[TMR2CN0]
 374   1        /***********************************************************************
 375   1         - Start Timer 2 running
 376   1         ***********************************************************************/
 377   1        TMR2CN0 |= TMR2CN0_TR2__RUN;
 378   1        // [TMR2CN0]$
 379   1      
 380   1        // $[Timer Restoration]
 381   1        // Restore Timer Configuration
 382   1        TMR2CN0 |= TMR2CN0_TR2_save;
 383   1        // [Timer Restoration]$
 384   1      
 385   1      }
 386          
 387          extern void
 388          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 389          {
 390   1        // $[EIE1 - Extended Interrupt Enable 1]
 391   1        // [EIE1 - Extended Interrupt Enable 1]$
 392   1      
 393   1        // $[EIP1 - Extended Interrupt Priority 1]
 394   1        // [EIP1 - Extended Interrupt Priority 1]$
 395   1      
 396   1        // $[IE - Interrupt Enable]
 397   1        /***********************************************************************
 398   1         - Enable each interrupt according to its individual mask setting
 399   1         - Disable external interrupt 0
 400   1         - Disable external interrupt 1
 401   1         - Disable all SPI0 interrupts
 402   1         - Disable all Timer 0 interrupt
 403   1         - Disable all Timer 1 interrupt
 404   1         - Enable interrupt requests generated by the TF2L or TF2H flags
 405   1         - Disable UART0 interrupt
 406   1         ***********************************************************************/
 407   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 408   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED
 409   1            | IE_ES0__DISABLED;
 410   1        // [IE - Interrupt Enable]$
 411   1      
 412   1        // $[IP - Interrupt Priority]
 413   1        // [IP - Interrupt Priority]$
 414   1      
 415   1      }
 416          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    191    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.60.0.0   INITDEVICE                                                        11/16/2021 15:10:26 PAGE 8   

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
