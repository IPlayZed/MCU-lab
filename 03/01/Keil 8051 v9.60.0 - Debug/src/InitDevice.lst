C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/21/2021 15:18:51 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\minef\S
                    -implicityStudio\v5_workspace\01\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) 
                    -OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\minef\SimplicityStudio\v5_workspace\01\in
                    -c;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudi
                    -o/v5/developer/sdks/8051/v4.2.1//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJE
                    -CT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_0_enter_DefaultMode_from_RESET ();
  28   1        PORTS_1_enter_DefaultMode_from_RESET ();
  29   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  30   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  31   1        TIMER01_0_enter_DefaultMode_from_RESET ();
  32   1        TIMER_SETUP_0_enter_DefaultMode_from_RESET ();
  33   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  34   1        // [Config Calls]$
  35   1      
  36   1      }
  37          
  38          extern void
  39          WDT_0_enter_DefaultMode_from_RESET (void)
  40          {
  41   1        // $[Watchdog Timer Init Variable Declarations]
  42   1        uint32_t i;
  43   1        bool ea;
  44   1        // [Watchdog Timer Init Variable Declarations]$
  45   1      
  46   1        // $[WDTCN - Watchdog Timer Control]
  47   1        // Deprecated
  48   1        // [WDTCN - Watchdog Timer Control]$
  49   1      
  50   1        // $[WDTCN_2 - Watchdog Timer Control]
  51   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/21/2021 15:18:51 PAGE 2   

  52   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  53   1        WDTCN = 0xA5;
  54   1      
  55   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  56   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  57   1          {
  58   2            NOP ();
  59   2          }
  60   1      
  61   1        // Disable WDT
  62   1        ea = IE_EA;
  63   1        IE_EA = 0;
  64   1        WDTCN = 0xDE;
  65   1        WDTCN = 0xAD;
  66   1        IE_EA = ea;
  67   1      
  68   1        // [WDTCN_2 - Watchdog Timer Control]$
  69   1      
  70   1      }
  71          
  72          extern void
  73          PBCFG_0_enter_DefaultMode_from_RESET (void)
  74          {
  75   1        // $[XBR2 - Port I/O Crossbar 2]
  76   1        /***********************************************************************
  77   1         - Weak Pullups enabled 
  78   1         - Crossbar enabled
  79   1         ***********************************************************************/
  80   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
  81   1        // [XBR2 - Port I/O Crossbar 2]$
  82   1      
  83   1        // $[PRTDRV - Port Drive Strength]
  84   1        // [PRTDRV - Port Drive Strength]$
  85   1      
  86   1        // $[XBR0 - Port I/O Crossbar 0]
  87   1        // [XBR0 - Port I/O Crossbar 0]$
  88   1      
  89   1        // $[XBR1 - Port I/O Crossbar 1]
  90   1        // [XBR1 - Port I/O Crossbar 1]$
  91   1      
  92   1      }
  93          
  94          extern void
  95          CLOCK_0_enter_DefaultMode_from_RESET (void)
  96          {
  97   1        // $[CLKSEL - Clock Select]
  98   1        /***********************************************************************
  99   1         - Clock derived from the Internal High-Frequency Oscillator
 100   1         - SYSCLK is equal to selected clock source divided by 128
 101   1         ***********************************************************************/
 102   1        CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_128;
 103   1        // [CLKSEL - Clock Select]$
 104   1      
 105   1      }
 106          
 107          extern void
 108          TIMER_SETUP_0_enter_DefaultMode_from_RESET (void)
 109          {
 110   1        // $[CKCON0 - Clock Control 0]
 111   1        /***********************************************************************
 112   1         - System clock divided by 48
 113   1         - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 114   1         - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/21/2021 15:18:51 PAGE 3   

 115   1         - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 116   1         - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 117   1         - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 118   1         - Timer 1 uses the clock defined by the prescale field, SCA
 119   1         ***********************************************************************/
 120   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_48 | CKCON0_T0M__PRESCALE
 121   1            | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 122   1            | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 123   1            | CKCON0_T1M__PRESCALE;
 124   1        // [CKCON0 - Clock Control 0]$
 125   1      
 126   1        // $[TMOD - Timer 0/1 Mode]
 127   1        /***********************************************************************
 128   1         - Mode 2, 8-bit Counter/Timer with Auto-Reload
 129   1         - Mode 0, 13-bit Counter/Timer
 130   1         - Timer Mode
 131   1         - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 132   1         - Timer Mode
 133   1         - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 134   1         ***********************************************************************/
 135   1        TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 136   1            | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 137   1        // [TMOD - Timer 0/1 Mode]$
 138   1      
 139   1        // $[TCON - Timer 0/1 Control]
 140   1        /***********************************************************************
 141   1         - Start Timer 0 running
 142   1         ***********************************************************************/
 143   1        TCON |= TCON_TR0__RUN;
 144   1        // [TCON - Timer 0/1 Control]$
 145   1      
 146   1      }
 147          
 148          extern void
 149          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 150          {
 151   1        // $[EIE1 - Extended Interrupt Enable 1]
 152   1        // [EIE1 - Extended Interrupt Enable 1]$
 153   1      
 154   1        // $[EIP1 - Extended Interrupt Priority 1]
 155   1        // [EIP1 - Extended Interrupt Priority 1]$
 156   1      
 157   1        // $[IE - Interrupt Enable]
 158   1        /***********************************************************************
 159   1         - Enable each interrupt according to its individual mask setting
 160   1         - Disable external interrupt 0
 161   1         - Disable external interrupt 1
 162   1         - Disable all SPI0 interrupts
 163   1         - Enable interrupt requests generated by the TF0 flag
 164   1         - Disable all Timer 1 interrupt
 165   1         - Disable Timer 2 interrupt
 166   1         - Disable UART0 interrupt
 167   1         ***********************************************************************/
 168   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 169   1            | IE_ET0__ENABLED | IE_ET1__DISABLED | IE_ET2__DISABLED
 170   1            | IE_ES0__DISABLED;
 171   1        // [IE - Interrupt Enable]$
 172   1      
 173   1        // $[IP - Interrupt Priority]
 174   1        // [IP - Interrupt Priority]$
 175   1      
 176   1      }
 177          
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/21/2021 15:18:51 PAGE 4   

 178          extern void
 179          TIMER01_0_enter_DefaultMode_from_RESET (void)
 180          {
 181   1        // $[Timer Initialization]
 182   1        //Save Timer Configuration
 183   1        uint8_t TCON_save;
 184   1        TCON_save = TCON;
 185   1        //Stop Timers
 186   1        TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 187   1      
 188   1        // [Timer Initialization]$
 189   1      
 190   1        // $[TH0 - Timer 0 High Byte]
 191   1        /***********************************************************************
 192   1         - Timer 0 High Byte = 0x39
 193   1         ***********************************************************************/
 194   1        TH0 = (0x39 << TH0_TH0__SHIFT);
 195   1        // [TH0 - Timer 0 High Byte]$
 196   1      
 197   1        // $[TL0 - Timer 0 Low Byte]
 198   1        // [TL0 - Timer 0 Low Byte]$
 199   1      
 200   1        // $[TH1 - Timer 1 High Byte]
 201   1        // [TH1 - Timer 1 High Byte]$
 202   1      
 203   1        // $[TL1 - Timer 1 Low Byte]
 204   1        // [TL1 - Timer 1 Low Byte]$
 205   1      
 206   1        // $[Timer Restoration]
 207   1        //Restore Timer Configuration
 208   1        TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 209   1      
 210   1        // [Timer Restoration]$
 211   1      
 212   1      }
 213          
 214          extern void
 215          PORTS_0_enter_DefaultMode_from_RESET (void)
 216          {
 217   1        // $[P0 - Port 0 Pin Latch]
 218   1        // [P0 - Port 0 Pin Latch]$
 219   1      
 220   1        // $[P0MDOUT - Port 0 Output Mode]
 221   1        /***********************************************************************
 222   1         - P0.0 output is open-drain
 223   1         - P0.1 output is open-drain
 224   1         - P0.2 output is push-pull
 225   1         - P0.3 output is open-drain
 226   1         - P0.4 output is open-drain
 227   1         - P0.5 output is open-drain
 228   1         - P0.6 output is open-drain
 229   1         - P0.7 output is open-drain
 230   1         ***********************************************************************/
 231   1        P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 232   1            | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__OPEN_DRAIN | P0MDOUT_B4__OPEN_DRAIN
 233   1            | P0MDOUT_B5__OPEN_DRAIN | P0MDOUT_B6__OPEN_DRAIN
 234   1            | P0MDOUT_B7__OPEN_DRAIN;
 235   1        // [P0MDOUT - Port 0 Output Mode]$
 236   1      
 237   1        // $[P0MDIN - Port 0 Input Mode]
 238   1        // [P0MDIN - Port 0 Input Mode]$
 239   1      
 240   1        // $[P0SKIP - Port 0 Skip]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        09/21/2021 15:18:51 PAGE 5   

 241   1        // [P0SKIP - Port 0 Skip]$
 242   1      
 243   1        // $[P0MASK - Port 0 Mask]
 244   1        // [P0MASK - Port 0 Mask]$
 245   1      
 246   1        // $[P0MAT - Port 0 Match]
 247   1        // [P0MAT - Port 0 Match]$
 248   1      
 249   1      }
 250          
 251          extern void
 252          PORTS_1_enter_DefaultMode_from_RESET (void)
 253          {
 254   1        // $[P1 - Port 1 Pin Latch]
 255   1        // [P1 - Port 1 Pin Latch]$
 256   1      
 257   1        // $[P1MDOUT - Port 1 Output Mode]
 258   1        /***********************************************************************
 259   1         - P1.0 output is open-drain
 260   1         - P1.1 output is open-drain
 261   1         - P1.2 output is open-drain
 262   1         - P1.3 output is open-drain
 263   1         - P1.4 output is push-pull
 264   1         - P1.5 output is open-drain
 265   1         - P1.6 output is open-drain
 266   1         - P1.7 output is open-drain
 267   1         ***********************************************************************/
 268   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 269   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__PUSH_PULL
 270   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 271   1            | P1MDOUT_B7__OPEN_DRAIN;
 272   1        // [P1MDOUT - Port 1 Output Mode]$
 273   1      
 274   1        // $[P1MDIN - Port 1 Input Mode]
 275   1        // [P1MDIN - Port 1 Input Mode]$
 276   1      
 277   1        // $[P1SKIP - Port 1 Skip]
 278   1        // [P1SKIP - Port 1 Skip]$
 279   1      
 280   1        // $[P1MASK - Port 1 Mask]
 281   1        // [P1MASK - Port 1 Mask]$
 282   1      
 283   1        // $[P1MAT - Port 1 Match]
 284   1        // [P1MAT - Port 1 Match]$
 285   1      
 286   1      }
 287          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    146    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
